plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'kotlin-kapt'
    id 'com.klaxit.hiddensecrets'
}

// TODO - signing code conflicted with both android studio and github actions and has been
//   commented out. investigate a method to unify signing process across all environments.
// final File PROD_PROPS_FILE = new File(System.getProperty('user.home'), '.sign/signing.properties')
// final File REPO_PROPS_FILE = new File('repo.properties')
// final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
// final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)

def computeVersionName(label) {
    return "${android.defaultConfig.versionName}-${label}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_8

android {

    // Enable NDK build
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileSdkVersion 33
    // current: compileSdkVersion 32

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }

    kotlinOptions {
        jvmTarget = JAVA_VERSION
    }

    defaultConfig {
        applicationId 'org.greatfire.wikiunblocked'
        minSdkVersion 21
        targetSdkVersion 33
        // current: targetSdkVersion 31
        // TODO: update versionName with each release
        versionName "3.8"
        // TODO: update versionCode with each PR
        versionCode 100381
        testApplicationId 'org.greatfire.wikiunblocked.test'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }

        dimension 'default'

        // TODO: see above re: signing code
        // signingConfig signingConfigs.debug

        buildConfigField "String", "DEFAULT_RESTBASE_URI_FORMAT", '"%1$s://%2$s/api/rest_v1/"'
        buildConfigField "String", "META_WIKI_BASE_URI", '"https://meta.wikimedia.org"'
        buildConfigField "String", "EVENTGATE_ANALYTICS_EXTERNAL_BASE_URI", '"https://intake-analytics.wikimedia.org"'
        buildConfigField "String", "EVENTGATE_LOGGING_EXTERNAL_BASE_URI", '"https://intake-logging.wikimedia.org"'

        ndk {
            abiFilters = []
            abiFilters.addAll(ABI_FILTERS.split(';').collect{it as String})
        }

        packagingOptions {
            doNotStrip '**/libcronet*.so'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {

        dev { java.srcDirs += 'src/extra/java' }
        prod { java.srcDirs += 'src/extra/java' }
        alpha { java.srcDirs += 'src/extra/java' }
        beta { java.srcDirs += 'src/extra/java' }
        greatfire { java.srcDirs += 'src/extra/java' }
        custom { java.srcDirs += 'src/extra/java' }

        test {
            java.srcDirs += 'src/testlib/java'
        }

        androidTest {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    /* TODO: see above re: signing code
    signingConfigs {
        prod {
            setSigningConfigKey(prod, PROD_PROPS)
        }
        release {
            setSigningConfigKey(release, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }
    */

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'release-proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
    }

    flavorDimensions 'default'

    productFlavors {
        dev {
            versionName computeVersionName('dev')
            applicationIdSuffix '.dev'
            buildConfigField "String", "META_WIKI_BASE_URI", '"https://meta.wikimedia.beta.wmflabs.org"'
            buildConfigField "String", "EVENTGATE_ANALYTICS_EXTERNAL_BASE_URI", '"https://intake-analytics.wikimedia.beta.wmflabs.org"'
            buildConfigField "String", "EVENTGATE_LOGGING_EXTERNAL_BASE_URI", '"https://intake-logging.wikimedia.beta.wmflabs.org"'

            def TEST_LOGIN_USERNAME = System.getenv('TEST_LOGIN_USERNAME')
            def TEST_LOGIN_PASSWORD = System.getenv('TEST_LOGIN_PASSWORD')
            buildConfigField "String", "TEST_LOGIN_USERNAME", TEST_LOGIN_USERNAME != null ? "\"${TEST_LOGIN_USERNAME}\"" : '"Foo"'
            buildConfigField "String", "TEST_LOGIN_PASSWORD", TEST_LOGIN_PASSWORD != null ? "\"${TEST_LOGIN_PASSWORD}\"" : '"Bar"'
        }
        prod {
            versionName computeVersionName('r')
            // TODO: see above re: signing code
            // signingConfig signingConfigs.prod
        }
        alpha {
            versionName computeVersionName('alpha')
            applicationIdSuffix '.alpha'
        }
        beta {
            versionName computeVersionName('beta')
            applicationIdSuffix '.beta'
            // TODO: see above re: signing code
            // signingConfig signingConfigs.prod
        }
        greatfire {
            applicationId 'org.greatfire.wikiunblocked'
            versionName computeVersionName('greatfire')
            // TODO: see above re: signing code
            // signingConfig signingConfigs.prod
        }
        fdroid {
            applicationId 'org.greatfire.wikiunblocked.fdroid'
            // static string for fdroid repo
            versionName '3.8-fdroid'
            // TODO: see above re: signing code
            // signingConfig signingConfigs.prod
        }
        custom {
            versionName computeVersionName(customChannel)
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
            // TODO: see above re: signing code
            // signingConfig signingConfigs.prod
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    bundle {
        language {
            enableSplit false
        }
    }

    namespace 'org.wikipedia'
}

ext.abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, 'x86':3, 'x86_64':4 ]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def defaultCode = variant.versionCode
        // this only matches to a number for a single filter value
        def filter = ABI_FILTERS
        def abiMultiplier = project.ext.abiCodes.get(filter)
        if (abiMultiplier == null) {
            abiMultiplier = 0
        }
        // ie: 100370 -> 1003701
        output.versionCodeOverride = defaultCode * 10 + abiMultiplier
    }
}

configurations {
    compileClasspath.extendsFrom(implementation)
}

apply from: '../gradle/src/test.gradle'
apply from: '../gradle/src/checkstyle.gradle'
apply from: '../gradle/src/ktlint.gradle'

dependencies {

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String okHttpVersion = '4.10.0'
    String retrofitVersion = '2.9.0'
    String glideVersion = '4.13.2'
    String mockitoVersion = '3.4.0'
    String leakCanaryVersion = '2.8.1'
    String kotlinCoroutinesVersion = '1.3.9'
    String firebaseMessagingVersion = '23.1.0'
    String firebaseLoggingVersion = '31.0.0'
    String mlKitVersion = '17.0.4'
    String roomVersion = "2.4.3"
    String espressoVersion = '3.5.0'
    String serialization_version = '1.4.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation "com.google.android.material:material:1.7.0"
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.browser:browser:1.4.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.fragment:fragment-ktx:1.5.4"
    implementation "androidx.paging:paging-runtime-ktx:3.1.1"
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    implementation ('com.github.michael-rapp:chrome-like-tab-switcher:0.4.6') {
        exclude group: 'org.jetbrains'
    }

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"
    implementation "io.reactivex.rxjava3:rxjava:3.1.5"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation "com.github.skydoves:balloon:1.3.4"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    implementation("androidx.room:room-runtime:$roomVersion")
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation("androidx.room:room-ktx:$roomVersion")
    implementation "androidx.room:room-rxjava3:$roomVersion"

    // For language detection during editing
    devImplementation "com.google.mlkit:language-id:$mlKitVersion"
    prodImplementation "com.google.mlkit:language-id:$mlKitVersion"
    alphaImplementation "com.google.mlkit:language-id:$mlKitVersion"
    betaImplementation "com.google.mlkit:language-id:$mlKitVersion"
    greatfireImplementation "com.google.mlkit:language-id:$mlKitVersion"
    customImplementation "com.google.mlkit:language-id:$mlKitVersion"

    // For event logging and receiving push notifications for logged-in users.
    devImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    devImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    devImplementation "com.google.firebase:firebase-analytics-ktx"
    prodImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    prodImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    prodImplementation "com.google.firebase:firebase-analytics-ktx"
    alphaImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    alphaImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    alphaImplementation "com.google.firebase:firebase-analytics-ktx"
    betaImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    betaImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    betaImplementation "com.google.firebase:firebase-analytics-ktx"
    greatfireImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    greatfireImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    greatfireImplementation "com.google.firebase:firebase-analytics-ktx"
    customImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    customImplementation platform("com.google.firebase:firebase-bom:$firebaseLoggingVersion")
    customImplementation "com.google.firebase:firebase-analytics-ktx"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    implementation "com.squareup.leakcanary:plumber-android:$leakCanaryVersion"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "commons-io:commons-io:2.6"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "androidx.room:room-testing:$roomVersion"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "android.arch.persistence.room:testing:1.1.1"
    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    // switch to local files if needed to support development
    implementation files('libs/cronet-debug.aar')
    implementation files('libs/envoy-debug.aar')
    // implementation files('libs/IEnvoyProxy.aar')
    // use maven dependencies to support automation
    // implementation 'org.greatfire.envoy:cronet:102.0.5005.41'
    // implementation 'org.greatfire:envoy:102.0.5005.41.5'
    implementation 'org.greatfire:IEnvoyProxy:1.2.1'
}

/* TODO: see above re: signing code
private setSigningConfigKey(config, Properties props) {
    if(props != null) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

private static Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}
*/
